@document.meta
    title: A.C.E. Project Blueprint
    author: Anas Faaiz
    version: 1.1
    updated: 2025-07-09
    description: The complete vision, feature set, architecture, and roadmap for the Automated Command Environment (A.C.E.). This version reflects the completion of core project management and information hub features.
@end

* A.C.E. - The Vision

  A.C.E. (Automated Command Environment) is a personalized AI assistant that lives in the terminal. It's designed to understand natural language and automate daily developer tasks, acting as a centralized hub for managing projects, staying informed, and streamlining workflows.

* Core Architecture

  A.C.E. is built using a professional, modular Python package structure to ensure scalability and maintainability.

  ** Folder Structure

ACE/
├── src/
│   ├── init.py
│   ├── main.py
     │   └── features/
│       ├── init.py
│       ├── project_manager.py
│       ├── project_scaffolder.py
│       ├── vanguard.py
│       ├── news_hub.py
│       └── ... (other skills)
│
├── .env
├── .gitignore
├── projects.json
├── README.md
└── requirements.txt


- /src/main.py: The main entry point. Parses terminal commands and calls the correct skill.
- /src/features/: The "toolbox". Each `.py` file is a module dedicated to a specific skill.
- projects.json: A.C.E.'s memory. A database of all managed projects.
- .env: Securely stores secret credentials like the `GITHUB_TOKEN`.

* Interaction Methods

A.C.E. is controlled through two primary methods:

- [x] *Command Line:* Fast, precise commands for developers (e.g., `ace project create ...`).
- [ ] *Voice Based:* An "always-on" listener mode (`ace listen`) that uses a wakeword to activate and process natural language commands.

* Finalized Feature Set (v1.0 & v2.0)

** Workspace Management
  - [x] `ace project create [name]`: Instantly creates project folders from templates (React, Next.js, Vite).
  - [x] `ace project register [path]`: Automatically scans an existing local Git repo, finds its GitHub URL via API, and saves it to `projects.json`.
  - [x] `ace project list`: Displays all projects managed by A.C.E.
  - [ ] `ace project remove [name]`: Safely removes a project from the registry.
  - [x] `acego [nickname]`: A shell helper function to instantly navigate to any registered project directory.

** The Vanguard (Git Integration)
  - [ ] `ace git activate [nickname]`: An interactive workflow that shows status, asks for confirmation, then runs `git add .`, `git commit`, and `git push` to the correct feature branch.
  - [ ] `ace git sync [nickname]`: Safely pulls the latest changes from the remote repository.

** Information & Automation
  - [x] `ace news [--source] [--limit]`: Fetches tech news from sources like Hacker News, with options to filter.
  - [ ] `ace schedule "[time]" "[command]"`: A command-line interface to schedule any A.C.E. task to run at a later time.

* AI & NLP Strategy (The Custom Brain)

This is the final phase of the project, to be started after all core command-line tools are built and tested.

- *Phase 1: Foundation & Data Collection*
  - Build the non-AI versions of all core features first.
  - As each feature is built, simultaneously create a `training_data.jsonl` file with examples of how you would ask for that command in natural language.

- *Phase 2: The Training Ground*
  - Use Python libraries like `transformers`, `datasets`, and `torch`.
  - Write a separate training script to fine-tune a small, powerful language model (**DistilBERT**) using your custom data.
  - The goal is to teach the model to recognize your *intent* (e.g., `create_project`) and extract *entities* (e.g., `projectName: "photon"`).

- *Phase 3: Integration & Inference*
  - Create a new skill, `nlp_parser.py`, that loads your custom-trained local model.
  - The `ace listen` command will use this local model to parse your voice commands into structured actions, which then call the appropriate functions.

* Current Task & Immediate Next Step

**Build "The Vanguard" (Git Integration).**
Now that the project management and information hub foundations are complete, the next logical step is to build the most powerful automation feature.
1.  **Build the Tool:** Focus on building the interactive, command-line version of the `ace git activate [nickname]` command. This involves writing the logic in `vanguard.py` to check the current branch, show the status, ask for confirmation, and then run the `add`, `commit`, and `push` sequence.
2.  **Collect the Data:** As you build this command, add examples to your `training_data.jsonl` file.
    - "ace save my work on the login feature"
    - "activate my changes, message is fixed the styling"


